def read_data(file_name: str):
        # Prepare data for training process
    with open(f"./data/{file_name}", "r") as training_data_file:
        data_list = training_data_file.readlines()
    data_list = list(map(lambda x : x.split(','), data_list))
    return data_list   

# TESTS
class NeuralNetworkBasicTest(unittest.TestCase):    
    def setUp(self):
        #Test data for Neural Net processin
        self.nn = NeuralNetwork()
        #28x28-pixel square = 784 features, representing a handwritten digit (0 to 9).
        train_data_list = read_data("mnist_train_100.csv")
        self.image_data = train_data_list[0][1:]

    def test_add_input_layer(self):
        self.nn.add_input_layer(self.image_data)
        self.nn.print_nn()        
        self.assertEqual(len(self.nn.layers[0]), 784)

    def test_add_one_layer(self):
        self.nn.add_input_layer(self.image_data)
        self.nn.add_layer(neurons_in_layer=3)
        self.nn.print_nn()  
        self.assertEqual(len(self.nn.layers[1]), 3)
        #self.assertEqual(len(self.nn.layers[1][0].weights), 3)
    
    def test_add_two_layers(self):
        self.nn.add_input_layer(self.image_data)
        self.nn.add_layer(neurons_in_layer=3)
        self.nn.add_layer(neurons_in_layer=2)
        self.nn.print_nn()  
        self.assertEqual(len(self.nn.layers[2]), 2)

    def test_forward_propagation(self):        
        self.nn.add_input_layer(features=self.image_data)
        self.nn.add_layer(neurons_in_layer=3)
        self.nn.forward_propagation()
        
    def test_back_propagation(self):        
        #self.nn.add_input_layer(self.image_data)
        #TODO constructor for - features 
        self.nn.add_input_layer(features=[1,2,3])
        self.nn.add_layer(neurons_in_layer=5)
        self.nn.add_layer(neurons_in_layer=3)
        self.nn.add_layer(neurons_in_layer=2)
        self.nn.forward_propagation()
        #We have 2 neurons in the output layer, target output should have 2 values. Amount of neurons 
        self.nn.backward_propagation(input_data=[1,2], expected_output=[0.2, 0.3])        
        #self.nn.backward_propagation(input_data=self.image_data, expected_output=[0, 0, 1, 0, 0, 0, 0, 0, 0, 0])        


if __name__ == '__main__':
    # Create a test suite
    suite = unittest.TestSuite()
    #suite.addTest(NeuralNetworkBasicTest('test_add_input_layer'))
    #suite.addTest(NeuralNetworkBasicTest('test_add_one_layer'))
    #suite.addTest(NeuralNetworkBasicTest('test_add_two_layers'))
    #suite.addTest(NeuralNetworkBasicTest('test_forward_propagation'))
    #suite.addTest(NeuralNetworkBasicTest('test_back_propagation'))
    
    suite.addTest(NeuralNetworkBasicTest('test_matrices_multiplication'))

    # Run the test suite
    runner = unittest.TextTestRunner()
    runner.run(suite)
    
    # TODO questions 'check notations and formulas' -> https://d2l.ai/chapter_multilayer-perceptrons/backprop.html
    